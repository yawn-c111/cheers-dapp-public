/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  UsersData,
  UsersDataInterface,
} from "../../../contracts/data/UsersData";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_userAddress",
        type: "address",
      },
      {
        internalType: "string",
        name: "_userName",
        type: "string",
      },
      {
        internalType: "string",
        name: "_userProfile",
        type: "string",
      },
      {
        internalType: "string",
        name: "_userIcon",
        type: "string",
      },
    ],
    name: "addUsers",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "getAllUserList",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "userAddress",
            type: "address",
          },
          {
            internalType: "string",
            name: "userName",
            type: "string",
          },
          {
            internalType: "string",
            name: "userProfile",
            type: "string",
          },
          {
            internalType: "string",
            name: "userIcon",
            type: "string",
          },
          {
            internalType: "uint256",
            name: "creationTime",
            type: "uint256",
          },
        ],
        internalType: "struct SharedStruct.User[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_userAddress",
        type: "address",
      },
    ],
    name: "removeUser",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "users",
    outputs: [
      {
        internalType: "address",
        name: "userAddress",
        type: "address",
      },
      {
        internalType: "string",
        name: "userName",
        type: "string",
      },
      {
        internalType: "string",
        name: "userProfile",
        type: "string",
      },
      {
        internalType: "string",
        name: "userIcon",
        type: "string",
      },
      {
        internalType: "uint256",
        name: "creationTime",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50611167806100206000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c80632ce058f614610051578063365b98b21461006d5780635849606d146100a157806398575188146100bf575b600080fd5b61006b6004803603810190610066919061098d565b6100db565b005b61008760048036038101906100829190610a7e565b6101de565b604051610098959493929190610b48565b60405180910390f35b6100a96103dc565b6040516100b69190610d5e565b60405180910390f35b6100d960048036038101906100d49190610d80565b610651565b005b60006040518060a001604052808673ffffffffffffffffffffffffffffffffffffffff16815260200185815260200184815260200183815260200142815250908060018154018082558091505060019003906000526020600020906005020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550602082015181600101908161019f9190610fb9565b5060408201518160020190816101b59190610fb9565b5060608201518160030190816101cb9190610fb9565b5060808201518160040155505050505050565b600081815481106101ee57600080fd5b90600052602060002090600502016000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169080600101805461023790610ddc565b80601f016020809104026020016040519081016040528092919081815260200182805461026390610ddc565b80156102b05780601f10610285576101008083540402835291602001916102b0565b820191906000526020600020905b81548152906001019060200180831161029357829003601f168201915b5050505050908060020180546102c590610ddc565b80601f01602080910402602001604051908101604052809291908181526020018280546102f190610ddc565b801561033e5780601f106103135761010080835404028352916020019161033e565b820191906000526020600020905b81548152906001019060200180831161032157829003601f168201915b50505050509080600301805461035390610ddc565b80601f016020809104026020016040519081016040528092919081815260200182805461037f90610ddc565b80156103cc5780601f106103a1576101008083540402835291602001916103cc565b820191906000526020600020905b8154815290600101906020018083116103af57829003601f168201915b5050505050908060040154905085565b60606000805480602002602001604051908101604052809291908181526020016000905b8282101561064857838290600052602060002090600502016040518060a00160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160018201805461048990610ddc565b80601f01602080910402602001604051908101604052809291908181526020018280546104b590610ddc565b80156105025780601f106104d757610100808354040283529160200191610502565b820191906000526020600020905b8154815290600101906020018083116104e557829003601f168201915b5050505050815260200160028201805461051b90610ddc565b80601f016020809104026020016040519081016040528092919081815260200182805461054790610ddc565b80156105945780601f1061056957610100808354040283529160200191610594565b820191906000526020600020905b81548152906001019060200180831161057757829003601f168201915b505050505081526020016003820180546105ad90610ddc565b80601f01602080910402602001604051908101604052809291908181526020018280546105d990610ddc565b80156106265780601f106105fb57610100808354040283529160200191610626565b820191906000526020600020905b81548152906001019060200180831161060957829003601f168201915b5050505050815260200160048201548152505081526020019060010190610400565b50505050905090565b60008080549050905060005b81811015610773578273ffffffffffffffffffffffffffffffffffffffff16600082815481106106905761068f61108b565b5b906000526020600020906005020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff160361076257600081815481106106f1576106f061108b565b5b9060005260206000209060050201600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556001820160006107379190610778565b6002820160006107479190610778565b6003820160006107579190610778565b600482016000905550505b8061076c906110e9565b905061065d565b505050565b50805461078490610ddc565b6000825580601f1061079657506107b5565b601f0160209004906000526020600020908101906107b491906107b8565b5b50565b5b808211156107d15760008160009055506001016107b9565b5090565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610814826107e9565b9050919050565b61082481610809565b811461082f57600080fd5b50565b6000813590506108418161081b565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61089a82610851565b810181811067ffffffffffffffff821117156108b9576108b8610862565b5b80604052505050565b60006108cc6107d5565b90506108d88282610891565b919050565b600067ffffffffffffffff8211156108f8576108f7610862565b5b61090182610851565b9050602081019050919050565b82818337600083830152505050565b600061093061092b846108dd565b6108c2565b90508281526020810184848401111561094c5761094b61084c565b5b61095784828561090e565b509392505050565b600082601f83011261097457610973610847565b5b813561098484826020860161091d565b91505092915050565b600080600080608085870312156109a7576109a66107df565b5b60006109b587828801610832565b945050602085013567ffffffffffffffff8111156109d6576109d56107e4565b5b6109e28782880161095f565b935050604085013567ffffffffffffffff811115610a0357610a026107e4565b5b610a0f8782880161095f565b925050606085013567ffffffffffffffff811115610a3057610a2f6107e4565b5b610a3c8782880161095f565b91505092959194509250565b6000819050919050565b610a5b81610a48565b8114610a6657600080fd5b50565b600081359050610a7881610a52565b92915050565b600060208284031215610a9457610a936107df565b5b6000610aa284828501610a69565b91505092915050565b610ab481610809565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610af4578082015181840152602081019050610ad9565b60008484015250505050565b6000610b0b82610aba565b610b158185610ac5565b9350610b25818560208601610ad6565b610b2e81610851565b840191505092915050565b610b4281610a48565b82525050565b600060a082019050610b5d6000830188610aab565b8181036020830152610b6f8187610b00565b90508181036040830152610b838186610b00565b90508181036060830152610b978185610b00565b9050610ba66080830184610b39565b9695505050505050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b610be581610809565b82525050565b600082825260208201905092915050565b6000610c0782610aba565b610c118185610beb565b9350610c21818560208601610ad6565b610c2a81610851565b840191505092915050565b610c3e81610a48565b82525050565b600060a083016000830151610c5c6000860182610bdc565b5060208301518482036020860152610c748282610bfc565b91505060408301518482036040860152610c8e8282610bfc565b91505060608301518482036060860152610ca88282610bfc565b9150506080830151610cbd6080860182610c35565b508091505092915050565b6000610cd48383610c44565b905092915050565b6000602082019050919050565b6000610cf482610bb0565b610cfe8185610bbb565b935083602082028501610d1085610bcc565b8060005b85811015610d4c5784840389528151610d2d8582610cc8565b9450610d3883610cdc565b925060208a01995050600181019050610d14565b50829750879550505050505092915050565b60006020820190508181036000830152610d788184610ce9565b905092915050565b600060208284031215610d9657610d956107df565b5b6000610da484828501610832565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680610df457607f821691505b602082108103610e0757610e06610dad565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302610e6f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82610e32565b610e798683610e32565b95508019841693508086168417925050509392505050565b6000819050919050565b6000610eb6610eb1610eac84610a48565b610e91565b610a48565b9050919050565b6000819050919050565b610ed083610e9b565b610ee4610edc82610ebd565b848454610e3f565b825550505050565b600090565b610ef9610eec565b610f04818484610ec7565b505050565b5b81811015610f2857610f1d600082610ef1565b600181019050610f0a565b5050565b601f821115610f6d57610f3e81610e0d565b610f4784610e22565b81016020851015610f56578190505b610f6a610f6285610e22565b830182610f09565b50505b505050565b600082821c905092915050565b6000610f9060001984600802610f72565b1980831691505092915050565b6000610fa98383610f7f565b9150826002028217905092915050565b610fc282610aba565b67ffffffffffffffff811115610fdb57610fda610862565b5b610fe58254610ddc565b610ff0828285610f2c565b600060209050601f8311600181146110235760008415611011578287015190505b61101b8582610f9d565b865550611083565b601f19841661103186610e0d565b60005b8281101561105957848901518255600182019150602085019450602081019050611034565b868310156110765784890151611072601f891682610f7f565b8355505b6001600288020188555050505b505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006110f482610a48565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203611126576111256110ba565b5b60018201905091905056fea26469706673582212205aa0c0ea269fb3a3006b606215433d70d08bca45b08f35464dd828258b68a48564736f6c63430008110033";

type UsersDataConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: UsersDataConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class UsersData__factory extends ContractFactory {
  constructor(...args: UsersDataConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<UsersData> {
    return super.deploy(overrides || {}) as Promise<UsersData>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): UsersData {
    return super.attach(address) as UsersData;
  }
  override connect(signer: Signer): UsersData__factory {
    return super.connect(signer) as UsersData__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): UsersDataInterface {
    return new utils.Interface(_abi) as UsersDataInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): UsersData {
    return new Contract(address, _abi, signerOrProvider) as UsersData;
  }
}
